---
author: "Paul Schrimpf"
title: "Coding for Performance"
date: "2022-03-04"
bibliography: "perf.bib"
subtitle: ~
---


[![](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)

This work is licensed under a [Creative Commons Attribution-ShareAlike
4.0 International
License](http://creativecommons.org/licenses/by-sa/4.0/)


### About this document {-}

This document was created using Weave.jl. The code is available in
[on github](https://github.com/schrimpf/ARGridBootstrap.jl). The same
document generates both static webpages and associated (jupyter
notebook)[argridboot.ipynb].

# Introduction

Today we will look into some methods to improve the speed of our
code. Although speed is sometimes important, never forget that speed
should be low on your list of priorities when writing code. You should
prioritize correctness and maintainability ahead of
performance. Nonetheless, performance does matter for some problems.

If you have not already, be sure to read [the Peformance Tips section of Julia Docs](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1).

Also, read Rackauckas's notes on ["Optimizing Serial Code."](https://mitmath.github.io/18337/lecture2/optimizing) [@rackauckas2019a].

# Grid bootstrap

As a motivating example we will look at the gridded bootstrap of
Hansen (1999)[@hansen99].

<!-- FIXME: DESCRIPTION.  -->

Gauss, Matlab, and R code implementing Hansen's method is available on
[Hansen's
website](https://www.ssc.wisc.edu/~bhansen/progs/restat_99.html). The
Julia code below is more or less a direct translation from Hansen's R
code. Since this is a translation from R of a translation from Gauss,
this code will not necessarily follow best practices for Julia.


```julia
T = 200
e = randn(T)
y0 = 0
a = 0.9
@code_string b_est_original(e)
```

```
"function b_est_original(yin)\n  T = length(yin)\n  x = [ones(T-1) 2:T yin[
1:(T-1)]]\n  y = yin[2:T]\n  θ = x'*x \\ x'y\n  e = y - x*θ\n  se = sqrt.(d
iag(inv(x'*x) *(e'*e))./(T-4))\n  (θ=θ,se=se,e=e)\nend"
```



```julia
@code_string ar1_original(y0,a,e)
```

```
"function ar1_original(y0, a, e, rindex=T->rand(1:length(e),T))\n  T = leng
th(e)\n  y = Array{eltype(e)}(undef, T)\n  y[1] = abs(a)<1 ? y0 : zero(elty
pe(y))\n  et = e[rindex(T-1)]\n  for t in 2:T\n    y[t] = a*y[t-1] + et[t-1
] \n  end\n  y\nend"
```



```julia
@code_string gridbootstrap(b_est_original, a->a, 0.5:0.1:1, 99)
```

```
"function gridbootstrap(estimator, simulator,\n                       grid:
:AbstractVector,\n                       nboot=199)\n  g = length(grid)\n  
bootq = zeros(nboot, g)\n  ba    = zeros(nboot, g)\n  bootse = zeros(nboot,
g)\n  for ak in 1:g\n    for j in 1:nboot\n      (bootq[j,ak], bootse[j,ak]
) = estimator(simulator(grid[ak]))\n      ba[j,ak] = bootq[j,ak] - grid[ak]
\n    end\n  end\n  ts = ba./bootse\n  (ba=ba, t=ts)\nend"
```





## Improving performance

Now, let's run this code and time it. Note that we are running this
with only 50 grid points and 199 bootstrap replications. In real use,
you would want more like 999 bootstrap replications or more, and perhaps more
grid points.

```julia
julia> Profile.clear();
Error: UndefVarError: Profile not defined

julia> Profile.init(n=10^7,delay=0.0001);
Error: UndefVarError: Profile not defined

julia> @profile (b,t) = gridbootstrap(wrapper(b_est_original), a->ar1_original(y0, a, est.e),
                                      αgrid, 999);
Error: LoadError: UndefVarError: @profile not defined
in expression starting at /home/paul/.julia/dev/ARGridBootstrap/docs/jmd/argridboot.jmd:1

julia> Profile.print(noisefloor=2.0)
Error: UndefVarError: Profile not defined
```



To make code faster, we should begin by profiling.

```julia
println.(functiontext("b_est_mldivide",joinpath(dirname(Base.pathof(ARGridBootstrap)), "ar.jl")));
```

```
"""
    b_est_mldivide(y)

  Estimate AR(1) model with intercept and time trend. 

    y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]

# Arguments    
- `y`: vector 

# Returns
- `θ`: estimated coefficients
- `se`: standard errors
- `e`: residuals 
"""
function b_est_mldivide(yin)
  T = length(yin)
  x = [ones(T-1) 2:T yin[1:(T-1)]]
  y = yin[2:T]
  tmp = x'*x \ [x'*y I]
  θ = tmp[:,1]
  ixx = tmp[:,2:4]
  e = y - x*θ
  se = sqrt.(diag(ixx *(e'*e))./(T-4))
  (θ=θ,se=se,e=e)
end
```





Profile.jl works very simply. Every 0.0001 seconds, the line of code
being executed gets recorded. `Profile.print` shows the count of how
many times each line of code got recorded. From the output (these
numbers can vary quite a bit from run to run), we see
there were 640 ticks in ` gridbootstrap_original` (exact numbers will
vary on each execution, but relative ones should be similar), and
almost all of these occurred within `inv`.  If we want the
code to be faster, we should focus on these lines.  Calling both `inv`
and `\` is redundant; we should combine these computations.

```julia
@code_string b_est_mldivide(y)
```

```
"function b_est_mldivide(yin)\n  T = length(yin)\n  x = [ones(T-1) 2:T yin[
1:(T-1)]]\n  y = yin[2:T]\n  tmp = x'*x \\ [x'*y I]\n  θ = tmp[:,1]\n  ixx 
= tmp[:,2:4]\n  e = y - x*θ\n  se = sqrt.(diag(ixx *(e'*e))./(T-4))\n  (θ=θ
,se=se,e=e)\nend"
```



```julia
julia> Profile.clear();
Error: UndefVarError: Profile not defined

julia> @profile (b,t) = gridbootstrap(wrapper(b_est_mldivide), a->ar1_original(y0, a, est.e),
                                      αgrid, 999);
Error: LoadError: UndefVarError: @profile not defined
in expression starting at /home/paul/.julia/dev/ARGridBootstrap/docs/jmd/argridboot.jmd:1

julia> Profile.print(noisefloor=2.0)
Error: UndefVarError: Profile not defined
```


From this, we get a speedup by about a factor of 4 on my computer.


```julia
println.(functiontext("b_est_nox",joinpath(dirname(Base.pathof(ARGridBootstrap)), "ar.jl")));
```

```
""" 
    b_est_nox(y)

  Estimate AR(1) model with intercept and time trend. 

    y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]

# Arguments
- `y`: vector 

# Returns
- `θ`: estimated coefficients
- `se`: standard errors
- `e`: residualas 
"""
function b_est_nox(yin)
  T = length(yin)
  xx = @MMatrix zeros(eltype(yin),3,3)
  xy = @MVector zeros(eltype(yin),3)
  @inbounds @simd for t in 2:T
    xx[1,3] += yin[t-1]
    #xx[2,3] += t*yin[t-1]
    xx[2,3] = muladd(t,yin[t-1], xx[2,3])
    xx[3,3] += yin[t-1]^2
    xy[1] += yin[t]
    #xy[2] += t*yin[t]
    xy[2] = muladd(t, yin[t], xy[2])
    xy[3] = muladd(yin[t-1],yin[t], xy[3])
  end 
  xx[1,1] = T-1 # = 1'*1
  xx[1,2] = xx[2,1] = (T+1)*T/2 - 1 # sum(p+1:T)
  xx[2,2] = (2*(T)+1)*(T)*(T+1)/6 - 1 # sum((p+1:T).^2)  
  xx[3,1] = xx[1,3]
  xx[3,2] = xx[2,3]
  ixx = inv(xx)
  θ = ixx * xy
  e = similar(yin,T-1)
  @simd for t in 2:T
    @inbounds e[t-1] = yin[t] - θ[1] - θ[2]*t - θ[3]*yin[t-1]
  end
  se = sqrt.(diag(ixx *(e'*e))./(T-4))
  (θ=θ,se=se,e=e)
end
```





Now, the most time consuming parts of the code are, unsurprisingly,
the call to ` \`, and, perhaps surprisingly, ` hcat` from
creating ` x`. Allocating and copying memory is relatively slow. The
creation of ` x` involves both. We can avoid creating `x` by just
accumulating $X'y$ and $X'X$ in a loop.

```julia
@code_string b_est_nox(y)
```

```
"function b_est_nox(yin)\n  T = length(yin)\n  xx = @MMatrix zeros(eltype(y
in),3,3)\n  xy = @MVector zeros(eltype(yin),3)\n  @inbounds @simd for t in 
2:T\n    xx[1,3] += yin[t-1]\n    #xx[2,3] += t*yin[t-1]\n    xx[2,3] = mul
add(t,yin[t-1], xx[2,3])\n    xx[3,3] += yin[t-1]^2\n   " ⋯ 232 bytes ⋯ "/6
 - 1 # sum((p+1:T).^2)  \n  xx[3,1] = xx[1,3]\n  xx[3,2] = xx[2,3]\n  ixx =
 inv(xx)\n  θ = ixx * xy\n  e = similar(yin,T-1)\n  @simd for t in 2:T\n   
 @inbounds e[t-1] = yin[t] - θ[1] - θ[2]*t - θ[3]*yin[t-1]\n  end\n  se = s
qrt.(diag(ixx *(e'*e))./(T-4))\n  (θ=θ,se=se,e=e)\nend"
```



```julia
using StaticArrays
```

```
Error: ArgumentError: Package StaticArrays not found in current path:
- Run `import Pkg; Pkg.add("StaticArrays")` to install the StaticArrays pac
kage.
```





We have further cut the time by a factor of two. However, this performance
optimization has been costly in terms of readability and extensibility
of our code. If we wanted to fit an AR(p) model instead of AR(1), the
` b_est_nox` function would be more difficult to modify than the
` b_est_mldivide` version.

EXERCISE: Read [the Performance Tips section of Julia
Manual](https://docs.julialang.org/en/v1/manual/performance-tips/) and
incorporate some of these tips into the above code.

EXERCISE: write a version of ` b_est` that avoids allocating the full
$T \times 3$ $X$ matrix, but can still be generalized to an AR(p) model.

EXERCISE: examine how the relative performance of these versions of `
b_est` vary with ` T`, ` nboot`, and the number of grid points.

EXERCISE: the Julia package ` StaticArrays.jl` provides an alternative
array implementation that is often much faster than ` Base.Array`. Try
implementing ` b_est` using ` StaticArrays.jl`. You will likely need to
use mutable arrays (see ` @MMatrix` and ` @MVector`). Note that ` inv` of
a small array will be substantially faster when using ` StaticArray.jl`
instead of ` Base.Array`.

## Fastest version

The fastest version of the code that I could write combines the ideas
above. As above, it avoids allocating `x`. It also avoids allocating
`e` by combining the simulation and estimation into a single
loop. Finally, it uses mutable static arrays to ensure that operations
on `xx` and `xy` have as little overhead as possible. Note that for
small StaticArrays, `inv` will call a specialized, fast version, and
ends up being faster than `\`.

```julia
using StaticArrays
```


```julia
@code_string simulate_estimate_arp(y0,a,e)
```

```
"function simulate_estimate_arp(y0, a, e, ar::Val{P}=Val(1),\n             
                  rindex=()->rand(1:length(e))) where P\n  T = length(e)\n 
 length(a)==P || error(\"length(a) not equal to P\")\n  xx = @MMatrix zeros
(eltype(e),P+2, P+2)\n  xy = @MVector zeros(eltype(e)," ⋯ 644 bytes ⋯ "1)\n
      xt[4:(P+2)] .= xt[3:(P+1)]\n    end\n    xt[3] = y\n  end\n  @inbound
s for i in 3:(P+2)\n    for j in 1:(i-1)\n      xx[i,j] = xx[j,i]\n    end\
n  end\n  ixx = inv(xx)\n  θ = ixx*xy\n  ee = yy - xy'*ixx*xy\n  se = sqrt.
(abs.(diag(ixx *(ee))./(T-(2*P+2))))\n  (θ=θ,se=se)\nend"
```



```julia
println.(functiontext("gridbootstrap_threaded",joinpath(dirname(Base.pathof(ARGridBootstrap)), "gridbootstrap.jl")));
```

```
"""
    gridbootstrap_threaded(estimator, simulator, 
                    grid::AbstractVector, 
                    nboot=199, rng=rngarray(nthreads())
    
Computes grid bootstrap estimates a single parameter model. 

Multithreaded version.

For each α ∈ grid, repeatedly simulate data with parameter α and then compu
te an estimate. 
 

# Arguments
- `estimator` function of output of `simulator` that returns a
    2-tuple containing an estimate of α and its standard error.  
- `simulator` function that given `α` and `rng`, simulates data
    that can be used to estimate α 
- `grid` grid of parameter values. For each value, `nboot`
    datasets will be simulated and estimates computed.  
- `nboot` 
- `rng` array of RNG states of length = number of threads

# Returns
- `ba` hatα - α for each grid value and simulated dataset
- `t` t-stat  for each grid value and simulated dataset
"""
function gridbootstrap_threaded(estimator, simulator,
                                grid::AbstractVector,
                                nboot=199; rng=rngarray(nthreads()))
  g = length(grid)
  bootq = zeros(nboot, g)
  ba    = zeros(nboot, g)
  bootse = zeros(nboot,g)
  #@threads for ak in 1:g
  #  for j in 1:nboot
  @threads for idx ∈ CartesianIndices(ba)
    j =  idx[1]
    ak = idx[2]
    (bootq[j,ak], bootse[j,ak]) = estimator(simulator(grid[ak],rng[threadid
()]))
    ba[j,ak] = bootq[j,ak] - grid[ak]
  end
  ts = ba./bootse
  (ba=ba, t=ts)
end
```





On my computer, this version of the code is about 15 times faster than
the original.


# Multi-threading

Modern computers almost all have multiple cores. We can divide the
time it takes our code by up to the number of cores we have (but
usually less) by writing multi-threaded code. Multi-threaded code
performs multiple tasks at once with shared memory. Before you begin
writing multi-threaded code, you should make sure your code isn't
already using all available cores. It is likely that the BLAS and
Lapack libraries that Julia uses for linear algebra are
multi-threaded. If you code is dominated by large matrix operations,
it may already be using all available cores. In that case, there will
not be much benefit from additional multi-threading.

Read ["The Basics of Single Node Parallel Computing"](https://mitmath.github.io/18337/lecture5/parallelism_overview)
Rackauckus (2019) [@rackauckus2019b] .

Once we have decided that the code might benefit from multi-threading,
we should look for loops (or other independent tasks) that can be
multi-threaded. There is some overhead from creating threads and
communicating among them. Multi-threading generally works best for
loops where each iteration involves substantial work, and each
iteration is independent of all others. The loops over grid points and
bootstrap repetitions in ` gridbootstrap` are perfect candidates. We
don't care about the order in which these loops get executed. The
result of each iteration is (mostly) independent of all others.

Some care must be taken with random number generators and
multi-threaded code. See
[the Julia docs](https://docs.julialang.org/en/v1/manual/parallel-computing/index.html#Side-effects-and-mutable-function-arguments-1) for more information.

```julia
rng = rngarray(nthreads())
@code_string gridbootstrap_threaded(wrapper(b_est_original),
                               (a, rng)->ar1_original(y0, a, est.e, n->rand(rng,1:(T-1),n)),
                               αgrid, 2, rng=rng)
```

```
Error: MethodError: no method matching getindex(::Nothing, ::Int64)
```





Now, let's try multi-threading the original version of the code.

```julia
using Base.Threads
println("Single thread, original version")
@time begin # this is so slow that using btime is not so necessary
  (b,t) = gridbootstrap(wrapper(b_est_original), a->ar1_original(y0, a, est.e),
                        αgrid, 199);
end;

rng = rngarray(nthreads())
# make sure the threaded version is compiled before timing it
(b,t) = gridbootstrap_threaded(wrapper(b_est_original),
                               (a, rng)->ar1_original(y0, a, est.e, n->rand(rng,1:(T-1),n)),
                               αgrid, 2, rng=rng);
println("$(nthreads()) threads, original version")
@time begin # this is so slow that using btime is not so necessary
  (b,t) = gridbootstrap_threaded(wrapper(b_est_original),
                                 (a, rng)->ar1_original(y0, a, est.e, n->rand(rng,1:(T-1),n)),
                                 αgrid, 199, rng=rng);
end;
```

```
Single thread, original version
Error: UndefVarError: wrapper not defined
```





The execution times are nearly identical on my computer. The reason is
that the computation is dominated by the creation of ` X` and
multiplying ` X'*X` and ` X'*y`. These operations are already
multi-threaded in the BLAS version I have installed. It is possible
first calling ` using LinearAlgebra; BLAS.set_num_threads(1)` would
improve the performance of the multi-threaded bootstrap.


```julia
println("Single thread, fastest version")
@btime  (b,t) = gridbootstrap(estimator(), a->a, αgrid, nboot);

println("$(nthreads()) threads, fastest version")
estimator_threaded(y0=y0,e=est.e)=function(foo)
  (a, rng) = foo
  out=simulate_estimate_arp(y0,a,e,Val(1),()->rand(rng,1:length(e)))
  (out.θ[3], out.se[3])
end
rng = rngarray(nthreads())
@btime begin
  (bs, ts) = gridbootstrap_threaded(estimator_threaded(),
                                    (a,rng)->(a,rng), αgrid,
                                    nboot, rng=rng)  
end;
```

```
Single thread, fastest version
Error: LoadError: UndefVarError: @btime not defined
in expression starting at /home/paul/.julia/dev/ARGridBootstrap/docs/jmd/ar
gridboot.jmd:3
```





Notice how the speedup from using multiple threads is far less than
number of cores. On my computer, the threaded version of the code is
about 4 times faster, even though my computer has 40 "cores" (or 20
physical cores. My computer has 2 processors with 10 cores each, and each
core is hyperthreaded into 2. The OS sees 40 processors, but half of
them are sharing substantial resources). A speedup far less than the
number of cores is typical. Creating and managing multiple threads
creates some overhead. Moreover, cores must share various resources;
most notably RAM and some cache.

# GPU

Compared to CPUs, GPUs have a huge number of cores operating at a
slower clockrate. GPUs also have their own separate memory, which they
can access faster than CPUs access RAM.  These characteristics make
GPUs well-suited to large parallel computations. Unfortunately, fully
utilizing GPUs can require substantial changes to your code.

See ["The Different Flavors of
Parallelism"](https://mitmath.github.io/18337/lecture6/styles_of_parallelism)
Rackauckas (2019) [@rackauckas2019c] for more information comparing
GPUs to various forms of parallelism on CPUs.

## Array interface

The easiest way to use a GPU in Julia is through a high level array
interface. `ArrayFire.jl`, `oneAPI.jl`, and `CUDA.jl` each offer such
interfaces. We will focus on `CUDA.jl` in these
notes. `CUDA.jl` relies on Nvidia's CUDA platform, so it only
works with Nvidia GPUs. Nvidia tends to dominate GPGPU, and the GPUs
available on cedar.computecanada.ca and in my desktop are Nvidia.

Using CUDA.CuArray is simple, but has some limitations. You create arrays
on the GPU using ` CuArray`. Any array level operation on these will
then be performed efficiently on the GPU. This includes broadcast
functions with ` .` and matrix multiplies.

```julia
using CUDA, Random, BenchmarkTools


N = 1000
M = 1000

function cuarraydemo(N,M)
  # wrapped in a  function so that the CuArrays are freed
  # otherwise we will run out GPU memory later
  A = randn(N,M);
  b = randn(M,2);
  println("Time on CPU")
  function foo(A,b)
    (A.^2)*b
  end
  @time c=foo(A,b);
  @time c=foo(A,b);
  A_gpu = CuArray(A); # copy of A in GPU memory
  b_gpu = CuArray(b);
  println("Computations on the GPU are fast")
  # @btime does not work inside a function
  @time CUDA.@sync c_gpu=foo(A_gpu,b_gpu);
  @time CUDA.@sync c_gpu=foo(A_gpu,b_gpu);
  println("But copying to and from GPU memory is not")
  bar(A,b) =Array(foo(CuArray(A), CuArray(b)))
  @time c2=bar(A,b);
  @time c2=bar(A,b);
end
```

```
cuarraydemo (generic function with 1 method)
```



```julia
julia> cuarraydemo(N,M);
Time on CPU
  0.004423 seconds (3 allocations: 7.645 MiB)
  0.008253 seconds (3 allocations: 7.645 MiB)
Computations on the GPU are fast
  0.000359 seconds (61 allocations: 2.406 KiB)
  0.000222 seconds (61 allocations: 2.406 KiB)
But copying to and from GPU memory is not
  0.001494 seconds (77 allocations: 18.609 KiB)
  0.001376 seconds (77 allocations: 18.609 KiB)
```



`CuArray`s also allow indexing, so you could use loops and other
constructs. However, this will not be fast. ` CuArray`s by itself will be
a good method to utilize GPUs when the code is dominated by operations
on large arrays.

Unfortunately, the fastest version of our grid bootstrap code does not
fit that description. A loop seems needed to generate $y$ due to the
recursiveness of the AR(1) model. The fastest version of the code
above involves many operations on small 3x3 arrays.

EXERCISE: modify ` b_est_original` or ` b_est_mldivide` to utilize
` CuArray`s. The approach taken in those functions involves some
moderate sized matrices, so it may benefit from ` CuArray`s.


## Custom CUDA Kernels

To parallelize the code above on a GPU, we will have to use a lower
level interface to the GPU. To explain how it works, we will begin
with a simple example that just squares all the elements of an array.

Disclaimer: my understanding of CUDA and the inner workings of GPUs is
far from complete. Some of the details in this section might be
inaccurate.

A typical workflow with CUDA consists of

1. Allocate GPU memory and copying arrays into it with ` CuArray`.
2. Decide how many threads and what configuration of threads to
   launch.
3. Each thread does some computation by running a "kernel" function.
4. Copy result from GPU memory to CPU memory.

In the code below, 1 happens in `cuarray_cudanative_compare`, 2 happens in the
` square!` function, ` square_kernel!` is the kernel in 3, and 4 is just
not done.

### Threads and blocks

CUDA organizes GPU threads into blocks. I believe that the threads in
a block all execute concurrently. Threads in the same block share some
memory and registers. All current Nvidia GPUs have a maximum number of
threads per block of 1024. Note that threads in the same block share
registers[^reg], and different kernel functions will use different
numbers of registers at once, so depending on the kernel function, you
might be limited to fewer than 1024 threads per block. The number of
registers available per block depends on your GPU. You can check your
GPU characteristics by compiling and running the C++ program in
`$CUDA_PATH/samples/1_Utilities/deviceQuery/`. Alternatively, you can
see this information in Julia by running the code below.

```julia
println("Maximum threads per block $(attribute(device(), CUDA.CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK))")
println("Maximum x blocks $(attribute(device(), CUDA.CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X))")
println("Maximum registers per block $(attribute(device(), CUDA.CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK))")
```

```
Maximum threads per block 1024
Maximum x blocks 2147483647
Maximum registers per block 65536
```





There is no simple way to predict how many registers a kernel function
uses. It will depend both on the code you write and how the compiler
optimizes the code. If you encounter cryptic error messages about CUDA
resources unavailable, then try reducing the number of threads per
block. Alternatively, you can limit the number of registers used by
passing the `maxregs` argument to `@cuda`.

You can execute more than 1024 threads by specifying a number of
blocks. There is also a limit to the number of blocks, but it is
rather large. In the code below, we set the number of blocks, so that
` nblocks*nthreads >= length(A)`. Each thread then operates on a single
element of ` A`. When the code is executed, each thread has a unique
` threadIdx` and ` blockIdx` combination, and these are used to assign
threads to elements of ` A`. The indices go from 1 to number of threads
(or blocks). For convenience you can request threads and blocks to
have up 3 dimensions, and there are ` threadIdx().y` and
` threadIdx().z` for the additional dimensions.

[^reg]: Processor registers are the fastest bits of memory on the
    processor, and registers are where the actual addition,
    multiplication, and other instructions are carried out.

```julia
function square!(A::CuArray)
  n = length(A)
  maxthreads = 1024
  nthreads = min(maxthreads, n)
  nblocks  = Int(ceil(n/nthreads))

  @cuda threads=nthreads blocks=nblocks square_kernel!(A)

  return A
end

function square_kernel!(A)
  i = threadIdx().x + (blockIdx().x-1)*blockDim().x
  if (i<=length(A))
    @inbounds A[i] *= A[i]
  end
  return nothing # CUDA kernels must return nothing
end

function cuarray_cudanative_compare(A)
  A_gpu = CuArray(A);
  println("CUDAnative square!")
  @time CUDA.@sync square!(A_gpu);
  @time CUDA.@sync square!(A_gpu);

  println("CuArray A*=A")
  A_gpu = CuArray(A);
  @time CUDA.@sync A_gpu .*= A_gpu;
  @time CUDA.@sync A_gpu .*= A_gpu;
  return nothing
end
```

```
cuarray_cudanative_compare (generic function with 1 method)
```



```julia
julia> cuarray_cudanative_compare(randn(N,M))
CUDAnative square!
  0.065133 seconds (18.80 k allocations: 2.233 MiB, 18.05% compilation time)
  0.000127 seconds (3 allocations: 256 bytes)
CuArray A*=A
  0.000175 seconds (23 allocations: 1.859 KiB)
  0.000136 seconds (23 allocations: 1.859 KiB)
```


### Kernel Limitations

CUDA kernel functions execute on the GPU and in GPU memory. Since GPU
memory is allocated and managed differently than RAM, many Julia
functions will not work in CUDA kernels. Most importantly, Julia
functions that allocate dynamically sized arrays will not work. This
means that even matrix multiplication like ` θ = ixx*xy` will fail (if
`ixx` or `xy` are dynamically allocated) since it allocates an array
for ` θ`. You can, however, have local scalars, tuples, and `
StaticArrays` within a kernel function. The key difference is that the
sizes of these types are known at compile time. If `ixx` and `xy` are
`StaticArrays`, then you can do something like `θ = ixx*xy`. Since the
compiler knows the size of `ixx` and `xy`, the compiler also know the
size of `θ`. However, even with ` StaticArrays` you must be careful
with operations that that create new StaticArrays (like matrix
multiplies). These will cause problems if called repeatedly within a
loop.[^loops]

[^loops]: If you create StaticArrays inside a loop, they get allocated
    to the GPU's "dynamic shared memory." I believe a new allocation
    happens each loop iteration. This will be slow, and there is a
    fairly small amount of dynamic shared memory, of which you will
    soon run out.

It is possible to dynamicaaly allocate GPU memory within a kernel
function, but it requires using the low-level interface to CUDA in
`CUDA.jl`. Moreoever, it is generally not a good idea to be
dynamically allocating and freeing memory in each of the thousands of
threads you execute.[^caveat]


[^caveat]: There are situations where allocating shared memory is
    needed and a good idea, but these require some advanced techniques
    that we will not cover.

## GPU grid bootstrap

```julia
@code_string argridbootstrap_gpu(est.e, y0, grid=αgrid, nboot=nboot, RealType=Float64)
```

```
Error: MethodError: no method matching getindex(::Nothing, ::Int64)
```



```julia
@code_string ARGridBootstrap.argridkernel!(1.,1., 1., Val(1), 1., 1. , 1.)
```

```
"function argridkernel!(ba,bootq, bootse,\n                       ar::Val{P
}, e, ei, αgrid) where P\n  b = threadIdx().x +  (blockIdx().x-1)*blockDim(
).x\n  ak= threadIdx().y + (blockIdx().y-1)*blockDim().y\n  if (b>size(ba,1
) || ak>size(ba,2))\n    return nothing\n  end\n  T = " ⋯ 777 bytes ⋯ "or i
 = 1:3\n    θ3 += ixx[3,i]*xy[i]\n  end\n  ee = yy\n  for i = 1:3\n    for 
j = 1:3\n      ee -= xy[i]*ixx[i,j]*xy[j]\n    end\n  end\n  se3 = CUDA.sqr
t(ixx[3,3]*ee/(T-(2*P+2)))\n  bootq[b,ak]  = θ3\n  bootse[b,ak] = se3\n  ba
[b,ak] = bootq[b,ak] - αgrid[ak]\n  return nothing\nend"
```



```julia
@btime begin
  grid = argridbootstrap_gpu(est.e, y0, grid=αgrid, nboot=nboot, RealType=Float64);
end;
```

```
Error: LoadError: UndefVarError: @btime not defined
in expression starting at /home/paul/.julia/dev/ARGridBootstrap/docs/jmd/ar
gridboot.jmd:2
```





Compared to the fastest CPU code above, the GPU version takes about
1/20th the time of the single-threaded CPU code, and about 1/5th the
time of the 30-threaded CPU code. Considering that the two CPUs in my
workstation together cost about 6 times more than the single GPU, the
performance of the GPU code is quite good. Also, we carefully profiled
and tuned the CPU code, but not the GPU code (although the GPU code
does use all algorithmic improvements of the fastest CPU code). Profiling GPU kernel
code requires using Nvidia's profiler, see
[CUDA.jl
documentation](https://cuda.juliagpu.org/stable/development/profiling/)
for information.
