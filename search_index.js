var documenterSearchIndex = {"docs":
[{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"title       : \"Coding for Performance\" subtitle    :  author      : Paul Schrimpf date        : 2019-10-13 bibliography: /home/paul/.julia/dev/ARGridBootstrap/docs/perf.bib –-","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"(Image: )","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License ","category":"page"},{"location":"temp.html#About-this-document-{-}-1","page":"Introudction","title":"About this document {-}","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"This document was created using Weave.jl. The code is available in on github. The same document generates both static webpages and associated jupyter notebooks. ","category":"page"},{"location":"temp.html#Introudction-1","page":"Introudction","title":"Introudction","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Today we will look into some methods to improve the speed of our code. Although speed is sometimes important, never forget that speed should be low on your list of priorities when writing code. You should prioritize correctness and maintainability ahead of performance. Nonetheless, performance does matter for some problems. ","category":"page"},{"location":"temp.html#Grid-bootstrap-1","page":"Introudction","title":"Grid bootstrap","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"As a motivating example we will look at the gridded bootstrap of @hansen99. FIXME: DESCRIPTION. Gauss, Matlab, and R code implementing Hansen's method is available on his website. The Julia code below is more or less a direct translation from Hansen's R code. Since this is a translation from R of a translation from Gauss, this code will not necessarily follow best practices for Julia. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     bestoriginal(y)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Estimate AR(1) model with intercept and time trend","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]","category":"page"},{"location":"temp.html#Arguments-1","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector ","category":"page"},{"location":"temp.html#Returns-1","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ: estimated coefficients\nse: standard errors\ne: residuals ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>bestoriginal</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>ones</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]]</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>\\</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>y</span><span class='hljl-t'>   </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'></span><span class='hljl-n'>θ</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-nf'>inv</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-oB'>&#39;*</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>4</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>,</span><span class='hljl-n'>e</span><span class='hljl-oB'>=</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&quot;&quot;     ar1_original(y0, a, e, rindex=T-&gt;rand(1:length(e), T))","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Simulate AR1 model by sampling errors from e with replacement. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = a*y[t-1] + ϵ[t]","category":"page"},{"location":"temp.html#Arguments-2","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y0: initial value for y\na: AR parameter\ne: values of for error term. ϵ = e[rindex(T)]]\nrindex function that returns random index in 1:length(e)","category":"page"},{"location":"temp.html#Returns-2","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector of length T = length(e)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>ar1_original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>rindex</span><span class='hljl-oB'>=</span><span class='hljl-n'>T</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>T</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Array</span><span class='hljl-p'>{</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)}(</span><span class='hljl-n'>undef</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>abs</span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>)</span><span class='hljl-oB'>&lt;</span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-oB'>?</span><span class='hljl-t'> </span><span class='hljl-n'>y0</span><span class='hljl-t'> </span><span class='hljl-oB'>:</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>y</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>et</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-nf'>rindex</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>y</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-oB'>*</span><span class='hljl-n'>y</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-n'>et</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>    </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     gridbootstrap(estimator, simulator,                    grid::AbstractVector,                    nboot=199)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Computes grid bootstrap estimates a single parameter model. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"For each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. ","category":"page"},{"location":"temp.html#Arguments-3","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"estimator function of output of simulator that returns a       2-tuple containing an estimate of α and its standard error.  \nsimulator function that given α simulates data that can be used to estimate α\ngrid grid of parameter values. For each value, nboot       datasets will be simulated and estimates computed.  \nnboot ","category":"page"},{"location":"temp.html#Returns-3","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba hatα - α for each grid value and simulated dataset\nt t-stat  for each grid value and simulated dataset","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap</span><span class='hljl-p'>(</span><span class='hljl-n'>estimator</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>simulator</span><span class='hljl-p'>,</span><span class='hljl-t'>                        </span><span class='hljl-n'>grid</span><span class='hljl-oB'>::</span><span class='hljl-n'>AbstractVector</span><span class='hljl-p'>,</span><span class='hljl-t'>                        </span><span class='hljl-n'>nboot</span><span class='hljl-oB'>=</span><span class='hljl-ni'>199</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>g</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-t'>    </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>ak</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>g</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>nboot</span><span class='hljl-t'>        </span><span class='hljl-p'>(</span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>bootse</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>])</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>estimator</span><span class='hljl-p'>(</span><span class='hljl-nf'>simulator</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]))</span><span class='hljl-t'>       </span><span class='hljl-n'>ba</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ts</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ba</span><span class='hljl-oB'>./</span><span class='hljl-n'>bootse</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-oB'>=</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'>=</span><span class='hljl-n'>ts</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#Improving-performance-1","page":"Introudction","title":"Improving performance","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Now, let's run this code and time it. Note that we are running this with only 50 grid points and 199 bootstrap replications. In real use, you would want more like 999 bootstrap replications or more, and perhaps more grid points. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     gridbootstrap(estimator, simulator,                    grid::AbstractVector,                    nboot=199)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Computes grid bootstrap estimates a single parameter model. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"For each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. ","category":"page"},{"location":"temp.html#Arguments-4","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"estimator function of output of simulator that returns a       2-tuple containing an estimate of α and its standard error.  \nsimulator function that given α simulates data that can be used to estimate α\ngrid grid of parameter values. For each value, nboot       datasets will be simulated and estimates computed.  \nnboot ","category":"page"},{"location":"temp.html#Returns-4","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba hatα - α for each grid value and simulated dataset\nt t-stat  for each grid value and simulated dataset","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap</span><span class='hljl-p'>(</span><span class='hljl-n'>estimator</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>simulator</span><span class='hljl-p'>,</span><span class='hljl-t'>                        </span><span class='hljl-n'>grid</span><span class='hljl-oB'>::</span><span class='hljl-n'>AbstractVector</span><span class='hljl-p'>,</span><span class='hljl-t'>                        </span><span class='hljl-n'>nboot</span><span class='hljl-oB'>=</span><span class='hljl-ni'>199</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>g</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-t'>    </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>ak</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>g</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>nboot</span><span class='hljl-t'>        </span><span class='hljl-p'>(</span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>bootse</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>])</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>estimator</span><span class='hljl-p'>(</span><span class='hljl-nf'>simulator</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]))</span><span class='hljl-t'>       </span><span class='hljl-n'>ba</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ts</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ba</span><span class='hljl-oB'>./</span><span class='hljl-n'>bootse</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-oB'>=</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'>=</span><span class='hljl-n'>ts</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"To make code faster, we should begin by profiling.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-cs'># simulate some data</span><span class='hljl-t'> </span><span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Random</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>BenchmarkTools</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>Profile</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>200</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>randn</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-n'>y0</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>0</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nfB'>0.9</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>ar1original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>bestoriginal</span><span class='hljl-p'>(</span><span class='hljl-n'>y</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nfB'>0.84</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-nfB'>0.22</span><span class='hljl-oB'>/</span><span class='hljl-ni'>50</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-nfB'>1.06</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>199</span><span class='hljl-t'> </span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>best</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>out</span><span class='hljl-oB'>=</span><span class='hljl-nf'>best</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>out</span><span class='hljl-oB'>.</span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>out</span><span class='hljl-oB'>.</span><span class='hljl-n'>se</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>])</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-t'> </span><span class='hljl-nd'>@btime</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap</span><span class='hljl-p'>(</span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>bestoriginal</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>ar1original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-oB'>.</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-t'>                              </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-p'>);</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"4.017 s (365375 allocations: 222.07 MiB)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Profile.jl works very simply. Every 0.0001 seconds, the line of code being executed gets recorded. Profile.print shows the count of how many times each line of code got recorded. From the output (these numbers can vary quite a bit from run to run), we see there were 640 ticks in gridbootstrap_original (exact numbers will vary on each execution, but relative ones should be similar), and almost all of these occurred within inv.  If we want the code to be faster, we should focus on these lines.  Calling both inv and \\ is redundant; we should combine these computations.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     bestmldivide(y)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Estimate AR(1) model with intercept and time trend. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]","category":"page"},{"location":"temp.html#Arguments-5","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector ","category":"page"},{"location":"temp.html#Returns-5","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ: estimated coefficients\nse: standard errors\ne: residuals ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>bestmldivide</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>ones</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]]</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>tmp</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>\\</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-n'>I</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-ni'>4</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'></span><span class='hljl-n'>θ</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-oB'>&#39;*</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>4</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>,</span><span class='hljl-n'>e</span><span class='hljl-oB'>=</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     bestmldivide(y)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Estimate AR(1) model with intercept and time trend. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]","category":"page"},{"location":"temp.html#Arguments-6","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector ","category":"page"},{"location":"temp.html#Returns-6","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ: estimated coefficients\nse: standard errors\ne: residuals ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>bestmldivide</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>ones</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]]</span><span class='hljl-t'>   </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>tmp</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>\\</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-n'>x</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-n'>I</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-ni'>4</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'></span><span class='hljl-n'>θ</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-oB'>&#39;*</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>4</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>,</span><span class='hljl-n'>e</span><span class='hljl-oB'>=</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"From this, we get a speedup by about a factor of 4 on my computer.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nB'>julia&gt; </span><span class='hljl-nd'>@btime</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap</span><span class='hljl-p'>(</span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>bestmldivide</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>ar1_original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-oB'>.</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-t'>                              </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-p'>);</span><span class='hljl-t'>   186.256 ms (385673 allocations: 208.60 MiB)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Now, the most time consuming parts of the code are, unsurprisingly, the call to \\, and, perhaps surprisingly, hcat from creating x. Allocating and copying memory is relatively slow. The creation of x involves both. We can avoid creating x by just accumulating Xy and XX in a loop. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;      bestnox(y)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Estimate AR(1) model with intercept and time trend. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]","category":"page"},{"location":"temp.html#Arguments-7","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector ","category":"page"},{"location":"temp.html#Returns-7","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ: estimated coefficients\nse: standard errors\ne: residualas ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>bestnox</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>),</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>),</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-oB'>^</span><span class='hljl-ni'>2</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>    </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># = 1&#39;1</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># sum(p+1:T)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># sum((p+1:T).^2)  </span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>tmp</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>\\</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-n'>I</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-ni'>4</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>similar</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>,</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>4</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>,</span><span class='hljl-n'>e</span><span class='hljl-oB'>=</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;      bestnox(y)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Estimate AR(1) model with intercept and time trend. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]","category":"page"},{"location":"temp.html#Arguments-8","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y: vector ","category":"page"},{"location":"temp.html#Returns-8","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ: estimated coefficients\nse: standard errors\ne: residualas ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>bestnox</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>),</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>),</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-oB'>^</span><span class='hljl-ni'>2</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>    </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># = 1&#39;1</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># sum(p+1:T)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-t'> </span><span class='hljl-cs'># sum((p+1:T).^2)  </span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>tmp</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>\\</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-n'>I</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>tmp</span><span class='hljl-p'>[</span><span class='hljl-oB'>:</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-ni'>4</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-n'>e</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>similar</span><span class='hljl-p'>(</span><span class='hljl-n'>yin</span><span class='hljl-p'>,</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>θ</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>yin</span><span class='hljl-p'>[</span><span class='hljl-n'>t</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>4</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>,</span><span class='hljl-n'>e</span><span class='hljl-oB'>=</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"We have further cut the time by a factor of two. However, this performance optimization has been costly in terms of readability and extensibility of our code. If we wanted to fit an AR(p) model instead of AR(1), the b_est_nox function would be more difficult to modify than the b_est_mldivide version. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"EXERCISE: Read the Performance Tips section of Julia Manual and incorporate some of these tips into the above code.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"EXERCISE: write a version of b_est that avoids allocating the full T times 3 X matrix, but can still be generalized to an AR(p) model. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"EXERCISE: examine how the relative performance of these versions of b_est vary with T, nboot, and the number of grid points. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"EXERCISE: the Julia package StaticArrays.jl provides an alternative array implementation that is often much faster than Base.Array. Try implementing b_est using StaticArrays.jl. You will likely need to use mutable arrays (see @MMatrix and @MVector). Note that inv of a small array will be substantially faster when using StaticArray.jl instead of Base.Array. ","category":"page"},{"location":"temp.html#Fastest-version-1","page":"Introudction","title":"Fastest version","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"The fastest version of the code that I could write combines the ideas above. As above, it avoids allocating x. It also avoids allocating e by combining the simulation and estimation into a single loop. Finally, it uses mutable static arrays to ensure that operations on xx and xy have as little overhead as possible. Note that for small StaticArrays, inv will call a specialized, fast version, and ends up being faster than \\. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>StaticArrays</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     simulateestimatearp(y0, a, e, ar::Val{P}, rindex=T-&gt;rand(1:length(e),T)) ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Simulates and estimates an AR(P) model. y is simulated as","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = a*y[t-1] + ϵ[t]","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"and the estimate of θ from ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[1] + θ[2]t + θ[3] y[t-1] + ... + θ[P] y[t-P] + u[t] ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"is computed. ","category":"page"},{"location":"temp.html#Arguments-9","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y0 initial value of y\na AR(1) parameter\ne error terms to sample from ϵ[t] = e[rindex(1)]\nar::Val{P} order of autoregressive model to estimate\nrindex function that returns random index in 1:length(e)","category":"page"},{"location":"temp.html#Returns-9","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ estimated coefficients\nse standard errors","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>simulateestimatearp</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>ar</span><span class='hljl-oB'>::</span><span class='hljl-nf'>Val</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-p'>}</span><span class='hljl-oB'>=</span><span class='hljl-nf'>Val</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-p'>),</span><span class='hljl-t'>                                </span><span class='hljl-n'>rindex</span><span class='hljl-oB'>=</span><span class='hljl-p'>()</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)))</span><span class='hljl-t'> </span><span class='hljl-n'>where</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>)</span><span class='hljl-oB'>==</span><span class='hljl-n'>P</span><span class='hljl-t'> </span><span class='hljl-oB'>||</span><span class='hljl-t'> </span><span class='hljl-nf'>error</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;length(a) not equal to P&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MMatrix</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>ones</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-nf'>abs</span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>)</span><span class='hljl-oB'>&lt;</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-n'>y0</span><span class='hljl-t'>   </span><span class='hljl-k'>else</span><span class='hljl-t'>      </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-nfB'>0.0</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-t'>     </span><span class='hljl-n'>α</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-oB'>+</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-n'>P</span><span class='hljl-t'> </span><span class='hljl-cs'># = 1&#39;1</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-nf'>sum</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># sum(P+1:T)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-nf'>sum</span><span class='hljl-p'>((</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-p'>)</span><span class='hljl-oB'>.^</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># sum((P+1:T).^2)  </span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>et</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-nf'>rindex</span><span class='hljl-p'>()]</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>         </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>       </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>dot</span><span class='hljl-p'>(</span><span class='hljl-n'>α</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-n'>et</span><span class='hljl-t'>     </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-oB'>^</span><span class='hljl-ni'>2</span><span class='hljl-t'>     </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>&gt;</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>4</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>inv</span><span class='hljl-p'>(</span><span class='hljl-n'>xx</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ixx</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-t'>   </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>xy</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>ixx</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-n'>abs</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>ee</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>))))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     simulateestimatearp(y0, a, e, ar::Val{P}, rindex=T-&gt;rand(1:length(e),T)) ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Simulates and estimates an AR(P) model. y is simulated as","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = a*y[t-1] + ϵ[t]","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"and the estimate of θ from ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y[t] = θ[1] + θ[2]t + θ[3] y[t-1] + ... + θ[P] y[t-P] + u[t] ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"is computed. ","category":"page"},{"location":"temp.html#Arguments-10","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"y0 initial value of y\na AR(1) parameter\ne error terms to sample from ϵ[t] = e[rindex(1)]\nar::Val{P} order of autoregressive model to estimate\nrindex function that returns random index in 1:length(e)","category":"page"},{"location":"temp.html#Returns-10","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"θ estimated coefficients\nse standard errors","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>simulateestimatearp</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>ar</span><span class='hljl-oB'>::</span><span class='hljl-nf'>Val</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-p'>}</span><span class='hljl-oB'>=</span><span class='hljl-nf'>Val</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-p'>),</span><span class='hljl-t'>                                </span><span class='hljl-n'>rindex</span><span class='hljl-oB'>=</span><span class='hljl-p'>()</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)))</span><span class='hljl-t'> </span><span class='hljl-n'>where</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>)</span><span class='hljl-oB'>==</span><span class='hljl-n'>P</span><span class='hljl-t'> </span><span class='hljl-oB'>||</span><span class='hljl-t'> </span><span class='hljl-nf'>error</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;length(a) not equal to P&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MMatrix</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>ones</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-nf'>abs</span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>)</span><span class='hljl-oB'>&lt;</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-n'>y0</span><span class='hljl-t'>   </span><span class='hljl-k'>else</span><span class='hljl-t'>      </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-nfB'>0.0</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nd'>@MVector</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-t'>     </span><span class='hljl-n'>α</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-oB'>+</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-n'>P</span><span class='hljl-t'> </span><span class='hljl-cs'># = 1&#39;1</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-nf'>sum</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># sum(P+1:T)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-nf'>sum</span><span class='hljl-p'>((</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>P</span><span class='hljl-p'>)</span><span class='hljl-oB'>.^</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># sum((P+1:T).^2)  </span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>et</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-nf'>rindex</span><span class='hljl-p'>()]</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>         </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>       </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>dot</span><span class='hljl-p'>(</span><span class='hljl-n'>α</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-n'>et</span><span class='hljl-t'>     </span><span class='hljl-nd'>@simd</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-oB'>^</span><span class='hljl-ni'>2</span><span class='hljl-t'>     </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>&gt;</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>4</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)]</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>inv</span><span class='hljl-p'>(</span><span class='hljl-n'>xx</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>θ</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ixx</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-t'>   </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>xy</span><span class='hljl-oB'>&#39;</span><span class='hljl-n'>ixx</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-t'>   </span><span class='hljl-n'>se</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>sqrt</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-n'>abs</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>diag</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>ee</span><span class='hljl-p'>))</span><span class='hljl-oB'>./</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>))))</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>θ</span><span class='hljl-oB'>=</span><span class='hljl-n'>θ</span><span class='hljl-p'>,</span><span class='hljl-n'>se</span><span class='hljl-oB'>=</span><span class='hljl-n'>se</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"On my computer, this version of the code is about 15 times faster than the original. ","category":"page"},{"location":"temp.html#Multi-threading-1","page":"Introudction","title":"Multi-threading","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Modern computers almost all have multiple cores. We can divide the time it takes our code by up to the number of cores we have (but usually less) by writing multi-threaded code. Multi-threaded code performs multiple tasks at once with shared memory. Before you begin writing multi-threaded code, you should make sure your code isn't already using all available cores. It is likely that the BLAS and Lapack libraries that Julia uses for linear algebra are multi-threaded. If you code is dominated by large matrix operations, it may already be using all available cores. In that case, there will not be much benefit from additional multi-threading.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Once we have decided that the code might benefit from multi-threading, we should look for loops that can be multi-threaded. There is some small overhead from creating threads and communicating among them. Multi-threading generally works best for loops where each iteration involves substantial work, and each iteration is independent of all others. The loops over grid points and bootstrap repetitions in gridbootstrap are perfect candidates. We don't care about the order in which these loops get executed. The result of each iteration is (mostly) independent of all others. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Some care must be taken with random number generators and multi-threaded code. See the Julia docs for more information. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     gridbootstrap_threaded(estimator, simulator,                      grid::AbstractVector,                      nboot=199)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Computes grid bootstrap estimates a single parameter model. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"For each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. ","category":"page"},{"location":"temp.html#Arguments-11","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"estimator function of output of simulator that returns a   2-tuple containing an estimate of α and its standard error.  \nsimulator function that given α and rng, simulates data   that can be used to estimate α \ngrid grid of parameter values. For each value, nboot   datasets will be simulated and estimates computed.  \nnboot ","category":"page"},{"location":"temp.html#Returns-11","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba hatα - α for each grid value and simulated dataset\nt t-stat  for each grid value and simulated dataset","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap_threaded</span><span class='hljl-p'>(</span><span class='hljl-n'>estimator</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>simulator</span><span class='hljl-p'>,</span><span class='hljl-t'>                                 </span><span class='hljl-n'>grid</span><span class='hljl-oB'>::</span><span class='hljl-n'>AbstractVector</span><span class='hljl-p'>,</span><span class='hljl-t'>                                 </span><span class='hljl-n'>nboot</span><span class='hljl-oB'>=</span><span class='hljl-ni'>199</span><span class='hljl-p'>;</span><span class='hljl-t'> </span><span class='hljl-n'>rng</span><span class='hljl-oB'>=</span><span class='hljl-nf'>rngarray</span><span class='hljl-p'>(</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>()))</span><span class='hljl-t'>   </span><span class='hljl-n'>g</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-t'>    </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-n'>g</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@threads</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>ak</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>g</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-n'>nboot</span><span class='hljl-t'>        </span><span class='hljl-p'>(</span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>bootse</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>])</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>estimator</span><span class='hljl-p'>(</span><span class='hljl-nf'>simulator</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>],</span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-nf'>threadid</span><span class='hljl-p'>()]))</span><span class='hljl-t'>       </span><span class='hljl-n'>ba</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>grid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ts</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ba</span><span class='hljl-oB'>./</span><span class='hljl-n'>bootse</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-oB'>=</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'>=</span><span class='hljl-n'>ts</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     rngarray(n)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Create n rng states that will not overlap for 10^20 steps.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Note: this will be unneeded in Julia 1.3 when thread-safe RNG is   included. &quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>rngarray</span><span class='hljl-p'>(</span><span class='hljl-n'>n</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>baserng</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'>  </span><span class='hljl-nf'>MersenneTwister</span><span class='hljl-p'>()</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Array</span><span class='hljl-p'>{</span><span class='hljl-nf'>typeof</span><span class='hljl-p'>(</span><span class='hljl-n'>baserng</span><span class='hljl-p'>)}(</span><span class='hljl-n'>undef</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-n'>Threads</span><span class='hljl-oB'>.</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>())</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>baserng</span><span class='hljl-t'>   </span><span class='hljl-n'>steps</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>big</span><span class='hljl-p'>(</span><span class='hljl-ni'>10</span><span class='hljl-p'>)</span><span class='hljl-oB'>^</span><span class='hljl-ni'>20</span><span class='hljl-t'> </span><span class='hljl-cs'># randjump is precomputed for steps = big(10)^20</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>()</span><span class='hljl-t'>     </span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Future</span><span class='hljl-oB'>.</span><span class='hljl-nf'>randjump</span><span class='hljl-p'>(</span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>steps</span><span class='hljl-p'>)</span><span class='hljl-t'>    </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Now, let's try multi-threading the original version of the code. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     rngarray(n)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Create n rng states that will not overlap for 10^20 steps.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Note: this will be unneeded in Julia 1.3 when thread-safe RNG is   included. &quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>rngarray</span><span class='hljl-p'>(</span><span class='hljl-n'>n</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>baserng</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'>  </span><span class='hljl-nf'>MersenneTwister</span><span class='hljl-p'>()</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Array</span><span class='hljl-p'>{</span><span class='hljl-nf'>typeof</span><span class='hljl-p'>(</span><span class='hljl-n'>baserng</span><span class='hljl-p'>)}(</span><span class='hljl-n'>undef</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-n'>Threads</span><span class='hljl-oB'>.</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>())</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>baserng</span><span class='hljl-t'>   </span><span class='hljl-n'>steps</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>big</span><span class='hljl-p'>(</span><span class='hljl-ni'>10</span><span class='hljl-p'>)</span><span class='hljl-oB'>^</span><span class='hljl-ni'>20</span><span class='hljl-t'> </span><span class='hljl-cs'># randjump is precomputed for steps = big(10)^20</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-oB'>:</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>()</span><span class='hljl-t'>     </span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Future</span><span class='hljl-oB'>.</span><span class='hljl-nf'>randjump</span><span class='hljl-p'>(</span><span class='hljl-n'>rng</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>],</span><span class='hljl-t'> </span><span class='hljl-n'>steps</span><span class='hljl-p'>)</span><span class='hljl-t'>    </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>rng</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"The execution times are nearly identical on my computer. The reason is that the computation is dominated by the creation of X and multiplying X'*X and X'*y. These operations are already multi-threaded in the BLAS version I have installed. It is possible first calling using LinearAlgebra; BLAS.set_num_threads(1) would improve the performance of the multi-threaded bootstrap. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-n'>Threads</span><span class='hljl-t'> </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Single thread, original version&quot;</span><span class='hljl-p'>)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Single thread, original version","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-k'>begin</span><span class='hljl-t'> </span><span class='hljl-cs'># this is so slow that using btime is not so necessary</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrap</span><span class='hljl-p'>(</span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>bestoriginal</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>ar1_original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-oB'>.</span><span class='hljl-n'>e</span><span class='hljl-p'>),</span><span class='hljl-t'>                         </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-ni'>199</span><span class='hljl-p'>);</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-p'>;</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"4.219345 seconds (428.67 k allocations: 225.041 MiB, 4.09% gc time)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-n'>rng</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>rngarray</span><span class='hljl-p'>(</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>())</span><span class='hljl-t'> </span><span class='hljl-cs'># make sure the threaded version is compiled before timing it</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrapthreaded</span><span class='hljl-p'>(</span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>bestoriginal</span><span class='hljl-p'>),</span><span class='hljl-t'>                                </span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>rng</span><span class='hljl-p'>)</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>ar1original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-oB'>.</span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>n</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-n'>rng</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>),</span><span class='hljl-n'>n</span><span class='hljl-p'>)),</span><span class='hljl-t'>                                </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>rng</span><span class='hljl-oB'>=</span><span class='hljl-n'>rng</span><span class='hljl-p'>);</span><span class='hljl-t'> </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;</span><span class='hljl-si'></span><span class='hljl-p'>(</span><span class='hljl-nf'>nthreads</span><span class='hljl-p'>())</span><span class='hljl-s'> threads, original version&quot;</span><span class='hljl-p'>)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"30 threads, original version","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-k'>begin</span><span class='hljl-t'> </span><span class='hljl-cs'># this is so slow that using btime is not so necessary</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>gridbootstrapthreaded</span><span class='hljl-p'>(</span><span class='hljl-nf'>wrapper</span><span class='hljl-p'>(</span><span class='hljl-n'>bestoriginal</span><span class='hljl-p'>),</span><span class='hljl-t'>                                  </span><span class='hljl-p'>(</span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>rng</span><span class='hljl-p'>)</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>ar1original</span><span class='hljl-p'>(</span><span class='hljl-n'>y0</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>a</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>est</span><span class='hljl-oB'>.</span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>n</span><span class='hljl-oB'>-&gt;</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-n'>rng</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>),</span><span class='hljl-n'>n</span><span class='hljl-p'>)),</span><span class='hljl-t'>                                  </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-ni'>199</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>rng</span><span class='hljl-oB'>=</span><span class='hljl-n'>rng</span><span class='hljl-p'>);</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-p'>;</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"4.266761 seconds (6.56 M allocations: 322.351 MiB, 3.87% gc time)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Notice how the speedup from using multiple threads is far less than number of cores. On my computer, the threaded version of the code is about 4 times faster, even though my computer has 40 \"cores\" (or 20 physical cores. My computer has 2 processors with 10 cores each, and each core is hyperthreaded into 2. The OS sees 40 processors, but half of them are sharing substantial resources). A speedup far less than the number of cores is typical. Creating and managing multiple threads creates some overhead. Moreover, cores must share various resources; most notably RAM and some cache. ","category":"page"},{"location":"temp.html#GPU-1","page":"Introudction","title":"GPU","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Compared to CPUs, GPUs have a huge number of cores operating at a somewhat slower clockrate. GPUs also have their own separate memory, which they can access faster than CPUs access RAM.  These characteristics make GPUs well-suited to large parallel computations. Unfortunately, fully utilizing GPUs can require substantial changes to your code.","category":"page"},{"location":"temp.html#Array-interface-1","page":"Introudction","title":"Array interface","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"The easiest way to use a GPU in Julia is through a high level array interface. ArrayFire.jl, CLArrays.jl, and CuArrays.jl each offer such interfaces. We will focus on CuArrays.jl in these notes. CuArrays.jl relies on Nvidia's CUDA platform, so it only works with Nvidia GPUs. Nvidia tends to dominate GPGPU, and the GPUs available on cedar.computecanada.ca and in my desktop are Nvidia. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Using CuArrays is simple, but has some limitations. You create arrays on the GPU using CuArray. Any array level operation on these will then be performed efficiently on the GPU. This includes broadcast functions with . and matrix multiplies. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>Random</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>BenchmarkTools</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-n'>N</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1000</span><span class='hljl-t'> </span><span class='hljl-n'>M</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1000</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>cuarraydemo</span><span class='hljl-p'>(</span><span class='hljl-n'>N</span><span class='hljl-p'>,</span><span class='hljl-n'>M</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-cs'># wrapped in a  function so that the CuArrays are freed</span><span class='hljl-t'>   </span><span class='hljl-cs'># otherwise we will run out GPU memory later</span><span class='hljl-t'>   </span><span class='hljl-n'>A</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>randn</span><span class='hljl-p'>(</span><span class='hljl-n'>N</span><span class='hljl-p'>,</span><span class='hljl-n'>M</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-n'>b</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>randn</span><span class='hljl-p'>(</span><span class='hljl-n'>M</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Time on CPU&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-oB'>.^</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-oB'>*</span><span class='hljl-n'>b</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>c</span><span class='hljl-oB'>=</span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>c</span><span class='hljl-oB'>=</span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-n'>Agpu</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>);</span><span class='hljl-t'> </span><span class='hljl-cs'># copy of A in GPU memory</span><span class='hljl-t'>   </span><span class='hljl-n'>bgpu</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Computations on the GPU are fast&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-cs'># @btime does not work inside a function</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-n'>cgpu</span><span class='hljl-oB'>=</span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-n'>Agpu</span><span class='hljl-p'>,</span><span class='hljl-n'>bgpu</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-n'>cgpu</span><span class='hljl-oB'>=</span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-n'>Agpu</span><span class='hljl-p'>,</span><span class='hljl-n'>bgpu</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;But copying to and from GPU memory is not&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nf'>bar</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-nf'>Array</span><span class='hljl-p'>(</span><span class='hljl-nf'>foo</span><span class='hljl-p'>(</span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-p'>)))</span><span class='hljl-t'>    </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>c2</span><span class='hljl-oB'>=</span><span class='hljl-nf'>bar</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>c2</span><span class='hljl-oB'>=</span><span class='hljl-nf'>bar</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>,</span><span class='hljl-n'>b</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"cuarraydemo (generic function with 1 method)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nB'>julia&gt; </span><span class='hljl-nf'>cuarraydemo</span><span class='hljl-p'>(</span><span class='hljl-n'>N</span><span class='hljl-p'>,</span><span class='hljl-n'>M</span><span class='hljl-p'>);</span><span class='hljl-t'> Time on CPU   0.001921 seconds (3 allocations: 7.645 MiB)   0.001942 seconds (3 allocations: 7.645 MiB) Computations on the GPU are fast   0.000526 seconds (84 allocations: 3.250 KiB)   0.000359 seconds (76 allocations: 2.844 KiB) But copying to and from GPU memory is not   0.013199 seconds (108 allocations: 15.309 MiB, 61.07% gc time)   0.004820 seconds (94 allocations: 15.308 MiB)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"CuArrays also allow indexing, so you could use loops and other constructs. However, this will not be fast. CuArrays by itself will be a good method to utilize GPUs when the code is dominated by operations on large arrays. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Unfortunately, the fastest version of our grid bootstrap code does not fit that description. A loop seems needed to generate y due to the recursiveness of the AR(1) model. The fastest version of the code above involves many operations on small 3x3 arrays.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"EXERCISE: modify b_est_original or b_est_mldivide to utilize CuArrays. The approach taken in those functions involves some moderate sized matrices, so it may benefit from CuArrays.","category":"page"},{"location":"temp.html#CUDAnative-1","page":"Introudction","title":"CUDAnative","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"To parallelize the code above on a GPU, we will have to use a lower level interface to the GPU. We will the CUDAnative.jl package. To explain how it works, we will begin with a simple example that just squares all the elements of an array. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Disclaimer: my understanding of CUDA and the inner workings of GPUs is far from complete. Some of the details in this section might be inaccurate. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"A typical workflow with CUDAnative consists of ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Allocate GPU memory and copying arrays into it with CuArray.\nDecide how many threads and what configuration of threads to launch.\nEach thread does some computation by running a \"kernel\" function.\nCopy result from GPU memory to CPU memory.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"In the code below, 1 happens in cuarray_cudanative_compare, 2 happens in the square! function, square_kernel! is the kernel in 3, and 4 is just not done. ","category":"page"},{"location":"temp.html#Threads-and-blocks-1","page":"Introudction","title":"Threads and blocks","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"CUDA organizes GPU threads into blocks. I believe that the threads in a block all execute concurrently. Threads in the same block share some memory and registers. All current Nvidia GPUs have a maximum number of threads per block of 1024. Note that threads in the same block share registers[reg], and different kernel functions will use different numbers of registers at once, so depending on the kernel function, you might be limited to fewer than 1024 threads per block. The number of registers available per block depends on your GPU. You can check your GPU characteristics by compiling and running the C++ program in  $CUDA_PATH/samples/1_Utilities/deviceQuery/.  Alternatively, you can access this information within Julia using CUDAdrv.jl.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAdrv</span><span class='hljl-t'> </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Maximum threads per block </span><span class='hljl-si'></span><span class='hljl-p'>(</span><span class='hljl-nf'>attribute</span><span class='hljl-p'>(</span><span class='hljl-nf'>device</span><span class='hljl-p'>(),</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAdrv</span><span class='hljl-oB'>.</span><span class='hljl-n'>MAXTHREADSPER_BLOCK</span><span class='hljl-p'>))</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Maximum threads per block 1024","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Maximum x blocks </span><span class='hljl-si'></span><span class='hljl-p'>(</span><span class='hljl-nf'>attribute</span><span class='hljl-p'>(</span><span class='hljl-nf'>device</span><span class='hljl-p'>(),</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAdrv</span><span class='hljl-oB'>.</span><span class='hljl-n'>MAXGRIDDIM_X</span><span class='hljl-p'>))</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Maximum x blocks 2147483647","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;Maximum registers per block </span><span class='hljl-si'></span><span class='hljl-p'>(</span><span class='hljl-nf'>attribute</span><span class='hljl-p'>(</span><span class='hljl-nf'>device</span><span class='hljl-p'>(),</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAdrv</span><span class='hljl-oB'>.</span><span class='hljl-n'>MAXREGISTERSPER_BLOCK</span><span class='hljl-p'>))</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Maximum registers per block 65536","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"As far as I can tell, there is no simple way to figure out how many registers a kernel function uses. It will depend both on the code you write and how the compiler optimizes the code. If you encounter cryptic error messages about CUDA resources unavailable, then try reducing the number of threads per block.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"You can execute more than 1024 threads by specifying a number of blocks. There is also a limit to the number of blocks, but it is rather large. In the code below, we set the number of blocks, so that nblocks*nthreads >= length(A). Each thread then operates on a single element of A. When the code is executed, each thread has a unique threadIdx and blockIdx combination, and these are used to assign threads to elements of A. The indices go from 1 to number of threads (or blocks). For convenience you can request threads and blocks to have up 3 dimensions, and there are threadIdx().y and threadIdx().z for the additional dimensions.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"[reg]: Processor registers are the fastest bits of memory on the processor, and registers are where the actual addition, multiplication, and other instructions are carried out. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAnative</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>square!</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-oB'>::</span><span class='hljl-n'>CuArray</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>n</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>maxthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1024</span><span class='hljl-t'>   </span><span class='hljl-n'>nthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>min</span><span class='hljl-p'>(</span><span class='hljl-n'>maxthreads</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>n</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>nblocks</span><span class='hljl-t'>  </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Int</span><span class='hljl-p'>(</span><span class='hljl-nf'>ceil</span><span class='hljl-p'>(</span><span class='hljl-n'>n</span><span class='hljl-oB'>/</span><span class='hljl-n'>nthreads</span><span class='hljl-p'>))</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-nd'>@cuda</span><span class='hljl-t'> </span><span class='hljl-n'>threads</span><span class='hljl-oB'>=</span><span class='hljl-n'>nthreads</span><span class='hljl-t'> </span><span class='hljl-n'>blocks</span><span class='hljl-oB'>=</span><span class='hljl-n'>nblocks</span><span class='hljl-t'> </span><span class='hljl-nf'>square_kernel!</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>)</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>A</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>square_kernel!</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>threadIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-nf'>blockIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-nf'>blockDim</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'>   </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>i</span><span class='hljl-oB'>&lt;=</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>))</span><span class='hljl-t'>     </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-n'>A</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>A</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'> </span><span class='hljl-cs'># CUDA kernels must return nothing</span><span class='hljl-t'> </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>cuarraycudanativecompare</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>Agpu</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;CUDAnative square!&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-nf'>square!</span><span class='hljl-p'>(</span><span class='hljl-n'>Agpu</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-nf'>square!</span><span class='hljl-p'>(</span><span class='hljl-n'>A_gpu</span><span class='hljl-p'>);</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;CuArray A=A&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>Agpu</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>A</span><span class='hljl-p'>);</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-n'>Agpu</span><span class='hljl-t'> </span><span class='hljl-oB'>.=</span><span class='hljl-t'> </span><span class='hljl-n'>Agpu</span><span class='hljl-p'>;</span><span class='hljl-t'>   </span><span class='hljl-nd'>@time</span><span class='hljl-t'> </span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nd'>@sync</span><span class='hljl-t'> </span><span class='hljl-n'>Agpu</span><span class='hljl-t'> </span><span class='hljl-oB'>.*=</span><span class='hljl-t'> </span><span class='hljl-n'>A_gpu</span><span class='hljl-p'>;</span><span class='hljl-t'>   </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"cuarraycudanativecompare (generic function with 1 method)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-nB'>julia&gt; </span><span class='hljl-nf'>cuarraycudanativecompare</span><span class='hljl-p'>(</span><span class='hljl-nf'>randn</span><span class='hljl-p'>(</span><span class='hljl-n'>N</span><span class='hljl-p'>,</span><span class='hljl-n'>M</span><span class='hljl-p'>))</span><span class='hljl-t'> CUDAnative square!   0.061898 seconds (20.21 k allocations: 1.950 MiB)   0.000173 seconds (21 allocations: 592 bytes) CuArray A*=A   0.000328 seconds (59 allocations: 2.953 KiB)   0.000201 seconds (52 allocations: 2.563 KiB)</span> </pre>","category":"page"},{"location":"temp.html#Kernel-Limitations-1","page":"Introudction","title":"Kernel Limitations","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"CUDA kernel functions execute on the GPU and in GPU memory. Since GPU memory is allocated and managed differently than RAM, many Julia functions will not work in CUDA kernels. Most importantly, Julia functions that allocate dynamically sized arrays will not work. This means that even matrix multiplication like θ = ixx*xy will fail (if ixx or xy are dynamically allocated) since it allocates an array for θ. You can, however, have local scalars, tuples, and StaticArrays within a kernel function. The key difference is that the sizes of these types are known at compile time. If ixx and xy are StaticArrays, then you can do something like θ = ixx*xy. Since the compiler knows the size of ixx and xy, the compiler also know the size of θ. However, even with StaticArrays you must be careful with operations that that create new StaticArrays (like matrix multiplies). These will cause problems if called repeatedly within a loop.[loops]","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"[loops]: If you create StaticArrays inside a loop, they get allocated to the GPU's \"dynamic shared memory.\" I believe a new allocation happens each loop iteration. This will be slow, and there is a fairly small amount of dynamic shared memory, of which you will soon run out.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"It is possible to dynamicaaly allocate GPU memory within a kernel function, but it requires using the low-level interface to CUDA in  CUDAnative.jl and/or CUDAdrv.jl. Moreoever, it is generally not a good idea to be dynamically allocating and freeing memory in each of the thousands of threads you execute.[caveat]","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"[caveat]: There are situations where allocating shared memory is a needed and a good idea, but these require some advanced techniques that we will not cover.","category":"page"},{"location":"temp.html#GPU-grid-bootstrap-1","page":"Introudction","title":"GPU grid bootstrap","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     argridbootstrap_gpu(e; αgrid = 0.84:(0.22/20):1.06,                           nboot=199, RealType = Float32)","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Computes grid bootstrap estimates for an AR(1) model. ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"For each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. ","category":"page"},{"location":"temp.html#Arguments-12","page":"Introudction","title":"Arguments","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"e vector error terms that will be resampled with replacement       to generate bootstrap sample  \ngrid grid of parameter values. For each value, nboot       datasets will be simulated and estimates computed.  \nnboot \nRealType type of numbers for GPU computation. On many GPUs,       Float32 will have better performance than Float64.","category":"page"},{"location":"temp.html#Returns-12","page":"Introudction","title":"Returns","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba hatα - α for each grid value and simulated dataset\nt t-stat  for each grid value and simulated dataset   ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"&quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>argridbootstrap_gpu</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>y0</span><span class='hljl-p'>;</span><span class='hljl-t'>                              </span><span class='hljl-n'>grid</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nfB'>0.84</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-nfB'>0.22</span><span class='hljl-oB'>/</span><span class='hljl-ni'>20</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-nfB'>1.06</span><span class='hljl-p'>,</span><span class='hljl-t'>                              </span><span class='hljl-n'>nboot</span><span class='hljl-oB'>=</span><span class='hljl-ni'>199</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>RealType</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Float32</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>g</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>)</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-n'>P</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-t'>   </span><span class='hljl-cs'># Allocate GPU memory</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-t'>    </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>g</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-n'>g</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>αg</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-n'>grid</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>eg</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>CuArray</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>ei</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Int</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-n'>ceil</span><span class='hljl-oB'>.</span><span class='hljl-p'>(</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>)</span><span class='hljl-oB'>.*</span><span class='hljl-n'>CuArrays</span><span class='hljl-oB'>.</span><span class='hljl-nf'>rand</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-p'>,</span><span class='hljl-n'>nboot</span><span class='hljl-p'>,</span><span class='hljl-n'>g</span><span class='hljl-p'>,</span><span class='hljl-nf'>length</span><span class='hljl-p'>(</span><span class='hljl-n'>e</span><span class='hljl-p'>))))</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-cs'># use of registers in gridkernel! limits the maximum threads to less</span><span class='hljl-t'>   </span><span class='hljl-cs'># than the full 1024</span><span class='hljl-t'>   </span><span class='hljl-n'>maxthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>sizeof</span><span class='hljl-p'>(</span><span class='hljl-n'>RealType</span><span class='hljl-p'>)</span><span class='hljl-oB'>&lt;=</span><span class='hljl-ni'>4</span><span class='hljl-t'> </span><span class='hljl-oB'>?</span><span class='hljl-t'> </span><span class='hljl-ni'>512</span><span class='hljl-t'> </span><span class='hljl-oB'>:</span><span class='hljl-t'> </span><span class='hljl-ni'>256</span><span class='hljl-t'>   </span><span class='hljl-n'>gthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-ni'>2</span><span class='hljl-oB'>^</span><span class='hljl-ni'>2</span><span class='hljl-t'>   </span><span class='hljl-n'>bthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-n'>maxthreads</span><span class='hljl-t'> </span><span class='hljl-oB'>÷</span><span class='hljl-t'> </span><span class='hljl-n'>gthreads</span><span class='hljl-t'>   </span><span class='hljl-n'>bblocks</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Int</span><span class='hljl-p'>(</span><span class='hljl-nf'>ceil</span><span class='hljl-p'>(</span><span class='hljl-n'>nboot</span><span class='hljl-oB'>/</span><span class='hljl-n'>bthreads</span><span class='hljl-p'>))</span><span class='hljl-t'>   </span><span class='hljl-n'>gblocks</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>Int</span><span class='hljl-p'>(</span><span class='hljl-nf'>ceil</span><span class='hljl-p'>(</span><span class='hljl-n'>g</span><span class='hljl-oB'>/</span><span class='hljl-n'>gthreads</span><span class='hljl-p'>))</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-nd'>@cuda</span><span class='hljl-t'> </span><span class='hljl-n'>threads</span><span class='hljl-oB'>=</span><span class='hljl-n'>bthreads</span><span class='hljl-p'>,</span><span class='hljl-n'>gthreads</span><span class='hljl-t'> </span><span class='hljl-n'>blocks</span><span class='hljl-oB'>=</span><span class='hljl-n'>bblocks</span><span class='hljl-p'>,</span><span class='hljl-n'>gblocks</span><span class='hljl-t'> </span><span class='hljl-nf'>argridkernel!</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-n'>bootq</span><span class='hljl-p'>,</span><span class='hljl-n'>bootse</span><span class='hljl-p'>,</span><span class='hljl-nf'>Val</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>eg</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>ei</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>αg</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>ts</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>ba</span><span class='hljl-oB'>./</span><span class='hljl-n'>bootse</span><span class='hljl-t'>   </span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-oB'>=</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>),</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-oB'>=</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-n'>ts</span><span class='hljl-p'>))</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     argridkernel!(ba,bootq, bootse, ar::Val{P}, e, ei, αgrid) ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"GPU kernel for simulation and estimation of AR(P) model. ","category":"page"},{"location":"temp.html#Arguments-(modified-on-return)-1","page":"Introudction","title":"Arguments (modified on return)","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba: nboot × ngrid array.  Will be filled with bootstrap estimates of α  grid values of true α \nbootq: nboot × ngrid array.  Will be filled with bootstrap  estimates of α\nbootse: nboot × ngrid array.  Will be filled with standard  errors of α for each bootstrap repetition      ","category":"page"},{"location":"temp.html#Arguments-(not-modified)-1","page":"Introudction","title":"Arguments (not modified)","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ar::Val{P} : autoregressive order for estimation. Simulated  model will always be AR(1) with 0 intercept and time trend, but  estimation will use an AR(P) model with intercept and time  trend. Only the AR(1) parameter estimate is included in ba,  bootq, and bootse.\ne : error terms to draw with replacement\nei : nboot × ngrid × length(e) array of indices of e to        use to generate bootstrap sample1\nαgrid : length ngrid values of AR(1) parameter to perform  bootstrap on.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Returns nothing, but modifies in place ba, bootq, and bootse &quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>argridkernel!</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-n'>bootq</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>bootse</span><span class='hljl-p'>,</span><span class='hljl-t'>                         </span><span class='hljl-n'>ar</span><span class='hljl-oB'>::</span><span class='hljl-nf'>Val</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-p'>},</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>ei</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-n'>where</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-t'>   </span><span class='hljl-n'>b</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>threadIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'>  </span><span class='hljl-p'>(</span><span class='hljl-nf'>blockIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-nf'>blockDim</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'>     </span><span class='hljl-n'>ak</span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>threadIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-nf'>blockIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-nf'>blockDim</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-oB'>&gt;</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>||</span><span class='hljl-t'> </span><span class='hljl-n'>ak</span><span class='hljl-oB'>&gt;</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>))</span><span class='hljl-t'>     </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ei</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>R</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MMatrix</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>one</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-n'>P</span><span class='hljl-t'>    </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-cs'>#sum((P+1):T) </span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-cs'>#sum((P+1:T).^2)</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>         </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>       </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-n'>ei</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>]]</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-nf'>dot</span><span class='hljl-p'>(</span><span class='hljl-n'>α</span><span class='hljl-p'>,</span><span class='hljl-n'>xt</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-oB'>*</span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>4</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># shift y lags</span><span class='hljl-t'>       </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>      </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>        </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>      </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>inv</span><span class='hljl-p'>(</span><span class='hljl-n'>xx</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>θ3</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>     </span><span class='hljl-n'>θ3</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yy</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>       </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>-=</span><span class='hljl-t'> </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>se3</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAnative</span><span class='hljl-oB'>.</span><span class='hljl-nf'>sqrt</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>ee</span><span class='hljl-oB'>/</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'>*</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)))</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>  </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>θ3</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>se3</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"<pre class='hljl'> <span class='hljl-s'>&quot;&quot;&quot;     argridkernel!(ba,bootq, bootse, ar::Val{P}, e, ei, αgrid) ","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"GPU kernel for simulation and estimation of AR(P) model. ","category":"page"},{"location":"temp.html#Arguments-(modified-on-return)-2","page":"Introudction","title":"Arguments (modified on return)","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ba: nboot × ngrid array.  Will be filled with bootstrap estimates of α  grid values of true α \nbootq: nboot × ngrid array.  Will be filled with bootstrap  estimates of α\nbootse: nboot × ngrid array.  Will be filled with standard  errors of α for each bootstrap repetition      ","category":"page"},{"location":"temp.html#Arguments-(not-modified)-2","page":"Introudction","title":"Arguments (not modified)","text":"","category":"section"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"ar::Val{P} : autoregressive order for estimation. Simulated  model will always be AR(1) with 0 intercept and time trend, but  estimation will use an AR(P) model with intercept and time  trend. Only the AR(1) parameter estimate is included in ba,  bootq, and bootse.\ne : error terms to draw with replacement\nei : nboot × ngrid × length(e) array of indices of e to        use to generate bootstrap sample1\nαgrid : length ngrid values of AR(1) parameter to perform  bootstrap on.","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Returns nothing, but modifies in place ba, bootq, and bootse &quot;&quot;&quot;</span><span class='hljl-t'> </span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-nf'>argridkernel!</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-n'>bootq</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>bootse</span><span class='hljl-p'>,</span><span class='hljl-t'>                         </span><span class='hljl-n'>ar</span><span class='hljl-oB'>::</span><span class='hljl-nf'>Val</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-p'>},</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>ei</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-n'>where</span><span class='hljl-t'> </span><span class='hljl-n'>P</span><span class='hljl-t'>   </span><span class='hljl-n'>b</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>threadIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'>  </span><span class='hljl-p'>(</span><span class='hljl-nf'>blockIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-nf'>blockDim</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>x</span><span class='hljl-t'>     </span><span class='hljl-n'>ak</span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>threadIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-nf'>blockIdx</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-nf'>blockDim</span><span class='hljl-p'>()</span><span class='hljl-oB'>.</span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>if</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>b</span><span class='hljl-oB'>&gt;</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-oB'>||</span><span class='hljl-t'> </span><span class='hljl-n'>ak</span><span class='hljl-oB'>&gt;</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>))</span><span class='hljl-t'>     </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>T</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>ei</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>R</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>eltype</span><span class='hljl-p'>(</span><span class='hljl-n'>ba</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MMatrix</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>one</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-n'>P</span><span class='hljl-t'>    </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>1</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>/</span><span class='hljl-ni'>2</span><span class='hljl-t'> </span><span class='hljl-cs'>#sum((P+1):T) </span><span class='hljl-t'>   </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>T</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'></span><span class='hljl-n'>P</span><span class='hljl-oB'></span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>/</span><span class='hljl-ni'>6</span><span class='hljl-t'> </span><span class='hljl-cs'>#sum((P+1:T).^2)</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zeros</span><span class='hljl-p'>(</span><span class='hljl-nf'>MVector</span><span class='hljl-p'>{</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>R</span><span class='hljl-p'>})</span><span class='hljl-t'>   </span><span class='hljl-n'>α</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-nd'>@inbounds</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-oB'>:</span><span class='hljl-n'>T</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>2</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>t</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>         </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>       </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>y</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>e</span><span class='hljl-p'>[</span><span class='hljl-n'>ei</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>,</span><span class='hljl-n'>t</span><span class='hljl-p'>]]</span><span class='hljl-t'> </span><span class='hljl-oB'>+</span><span class='hljl-t'> </span><span class='hljl-nf'>dot</span><span class='hljl-p'>(</span><span class='hljl-n'>α</span><span class='hljl-p'>,</span><span class='hljl-n'>xt</span><span class='hljl-p'>)</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>       </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>yy</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-oB'>*</span><span class='hljl-n'>y</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>4</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-cs'># shift y lags</span><span class='hljl-t'>       </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>     </span><span class='hljl-n'>xt</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>y</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"</span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>3</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)</span><span class='hljl-t'>      </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-p'>(</span><span class='hljl-n'>i</span><span class='hljl-oB'>-</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>        </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>xx</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>      </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ixx</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>inv</span><span class='hljl-p'>(</span><span class='hljl-n'>xx</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-n'>θ3</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>zero</span><span class='hljl-p'>(</span><span class='hljl-n'>R</span><span class='hljl-p'>)</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>     </span><span class='hljl-n'>θ3</span><span class='hljl-t'> </span><span class='hljl-oB'>+=</span><span class='hljl-t'> </span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>yy</span><span class='hljl-t'>   </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>     </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>j</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-t'>       </span><span class='hljl-n'>ee</span><span class='hljl-t'> </span><span class='hljl-oB'>-=</span><span class='hljl-t'> </span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>xy</span><span class='hljl-p'>[</span><span class='hljl-n'>j</span><span class='hljl-p'>]</span><span class='hljl-t'>     </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-k'>end</span><span class='hljl-t'>   </span><span class='hljl-n'>se3</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>CUDAnative</span><span class='hljl-oB'>.</span><span class='hljl-nf'>sqrt</span><span class='hljl-p'>(</span><span class='hljl-n'>ixx</span><span class='hljl-p'>[</span><span class='hljl-ni'>3</span><span class='hljl-p'>,</span><span class='hljl-ni'>3</span><span class='hljl-p'>]</span><span class='hljl-oB'></span><span class='hljl-n'>ee</span><span class='hljl-oB'>/</span><span class='hljl-p'>(</span><span class='hljl-n'>T</span><span class='hljl-oB'>-</span><span class='hljl-p'>(</span><span class='hljl-ni'>2</span><span class='hljl-oB'>*</span><span class='hljl-n'>P</span><span class='hljl-oB'>+</span><span class='hljl-ni'>2</span><span class='hljl-p'>)))</span><span class='hljl-t'>   </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>  </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>θ3</span><span class='hljl-t'>   </span><span class='hljl-n'>bootse</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>se3</span><span class='hljl-t'>   </span><span class='hljl-n'>ba</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>bootq</span><span class='hljl-p'>[</span><span class='hljl-n'>b</span><span class='hljl-p'>,</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'> </span><span class='hljl-oB'>-</span><span class='hljl-t'> </span><span class='hljl-n'>αgrid</span><span class='hljl-p'>[</span><span class='hljl-n'>ak</span><span class='hljl-p'>]</span><span class='hljl-t'>   </span><span class='hljl-k'>return</span><span class='hljl-t'> </span><span class='hljl-n'>nothing</span><span class='hljl-t'> </span><span class='hljl-k'>end</span> </pre>","category":"page"},{"location":"temp.html#","page":"Introudction","title":"Introudction","text":"Compared to the fastest CPU code above, the GPU version takes about 1/20th the time of the single-threaded CPU code, and about 1/5th the time of the 30-threaded CPU code. Considering that the two CPUs in my workstation together cost about 6 times more than the single GPU, the performance of the GPU code is quite good. Also, we carefully profiled and tuned the CPU code, but not the GPU code (although the GPU code does use all algorithmic improvements of the fastest CPU code). Profiling GPU kernel code requires using Nvidia's profiler, see CUDAnative documentation for information.","category":"page"},{"location":"test.html#Coding-for-Performance-1","page":"Coding for Performance","title":"Coding for Performance","text":"","category":"section"},{"location":"test.html#","page":"Coding for Performance","title":"Coding for Performance","text":"<meta http-equiv=\"refresh\" content=\"0;URL=./argridboot.html\">","category":"page"},{"location":"test.html#","page":"Coding for Performance","title":"Coding for Performance","text":"If you are not redirected automatically, follow the link.","category":"page"},{"location":"index.html#ARGridBootstrap.jl-1","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"","category":"section"},{"location":"index.html#","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"This package implements the grid bootstrap of Hansen (1999). ","category":"page"},{"location":"index.html#","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"For teaching purposes, multiple versions of the \"same\" function are included. The differences between these versions illustrate various techniques to improve performance. See Coding for Performance.","category":"page"},{"location":"index.html#Functions-1","page":"ARGridBootstrap.jl","title":"Functions","text":"","category":"section"},{"location":"index.html#","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"","category":"page"},{"location":"index.html#AR-1","page":"ARGridBootstrap.jl","title":"AR","text":"","category":"section"},{"location":"index.html#","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"Modules=[ARGridBootstrap]\nPages = [\"ar.jl\"] ","category":"page"},{"location":"index.html#ARGridBootstrap.ar1_original","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.ar1_original","text":"ar1_original(y0, a, e, rindex=T->rand(1:length(e), T))\n\nSimulate AR1 model by sampling errors from e with replacement. \n\ny[t] = a*y[t-1] + ϵ[t]\n\nArguments\n\ny0: initial value for y\na: AR parameter\ne: values of for error term. ϵ = e[rindex(T)]]\nrindex function that returns random index in 1:length(e)\n\nReturns\n\ny: vector of length T = length(e)\n\n\n\n\n\n","category":"function"},{"location":"index.html#ARGridBootstrap.b_est_mldivide-Tuple{Any}","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.b_est_mldivide","text":"b_est_mldivide(y)\n\nEstimate AR(1) model with intercept and time trend. \n\ny[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]\n\nArguments\n\ny: vector \n\nReturns\n\nθ: estimated coefficients\nse: standard errors\ne: residuals \n\n\n\n\n\n","category":"method"},{"location":"index.html#ARGridBootstrap.b_est_nox-Tuple{Any}","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.b_est_nox","text":"b_est_nox(y)\n\nEstimate AR(1) model with intercept and time trend. \n\ny[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]\n\nArguments\n\ny: vector \n\nReturns\n\nθ: estimated coefficients\nse: standard errors\ne: residualas \n\n\n\n\n\n","category":"method"},{"location":"index.html#ARGridBootstrap.b_est_original-Tuple{Any}","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.b_est_original","text":"b_est_original(y)\n\nEstimate AR(1) model with intercept and time trend\n\ny[t] = θ[0] + θ[1]t + θ[2]y[t-1] + e[t]\n\nArguments\n\ny: vector \n\nReturns\n\nθ: estimated coefficients\nse: standard errors\ne: residuals \n\n\n\n\n\n","category":"method"},{"location":"index.html#ARGridBootstrap.simulate_estimate_arp-Union{Tuple{P}, Tuple{Any,Any,Any}, Tuple{Any,Any,Any,Val{P}}, Tuple{Any,Any,Any,Val{P},Any}} where P","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.simulate_estimate_arp","text":"simulate_estimate_arp(y0, a, e, ar::Val{P}, rindex=T->rand(1:length(e),T))\n\nSimulates and estimates an AR(P) model. y is simulated as\n\ny[t] = a*y[t-1] + ϵ[t]\n\nand the estimate of θ from \n\ny[t] = θ[1] + θ[2]t + θ[3] y[t-1] + ... + θ[P] y[t-P] + u[t] \n\nis computed. \n\nArguments\n\ny0 initial value of y\na AR(1) parameter\ne error terms to sample from ϵ[t] = e[rindex(1)]\nar::Val{P} order of autoregressive model to estimate\nrindex function that returns random index in 1:length(e)\n\nReturns\n\nθ estimated coefficients\nse standard errors\n\n\n\n\n\n","category":"method"},{"location":"index.html#Grid-Bootstrap-1","page":"ARGridBootstrap.jl","title":"Grid Bootstrap","text":"","category":"section"},{"location":"index.html#","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.jl","text":"Modules=[ARGridBootstrap]\nPages = [\"gridbootstrap.jl\"] ","category":"page"},{"location":"index.html#ARGridBootstrap.argridbootstrap_gpu-Tuple{Any,Any}","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.argridbootstrap_gpu","text":"argridbootstrap_gpu(e; αgrid = 0.84:(0.22/20):1.06,\n                      nboot=199, RealType = Float32)\n\nComputes grid bootstrap estimates for an AR(1) model. \n\nFor each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. \n\nInputs:      - e vector error terms that will be resampled with replacement         to generate bootstrap sample        - grid grid of parameter values. For each value, nboot         datasets will be simulated and estimates computed.        - nboot       - RealType type of numbers for GPU computation. On many GPUs,         Float32 will have better performance than Float64.\n\nOutput:      - ba hatα - α for each grid value and simulated dataset      - t t-stat  for each grid value and simulated dataset   \n\n\n\n\n\n","category":"method"},{"location":"index.html#ARGridBootstrap.gridbootstrap","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.gridbootstrap","text":"gridbootstrap(estimator, simulator, \n              grid::AbstractVector, \n              nboot=199)\n\nComputes grid bootstrap estimates a single parameter model. \n\nFor each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. \n\nInputs:      - estimator function of output of simulator that returns a         2-tuple containing an estimate of α and its standard error.        - simulator function that given α simulates data that can be used to estimate α      - grid grid of parameter values. For each value, nboot         datasets will be simulated and estimates computed.        - nboot \n\nOutput:      - ba hatα - α for each grid value and simulated dataset      - t t-stat  for each grid value and simulated dataset\n\n\n\n\n\n","category":"function"},{"location":"index.html#ARGridBootstrap.gridbootstrap_threaded","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.gridbootstrap_threaded","text":"gridbootstrap_threaded(estimator, simulator, \n                grid::AbstractVector, \n                nboot=199)\n\nComputes grid bootstrap estimates a single parameter model. \n\nFor each α ∈ grid, repeatedly simulate data with parameter α and then compute an estimate. \n\nInputs:      - estimator function of output of simulator that returns a         2-tuple containing an estimate of α and its standard error.        - simulator function that given α and rng, simulates data         that can be used to estimate α       - grid grid of parameter values. For each value, nboot         datasets will be simulated and estimates computed.        - nboot \n\nOutput:      - ba hatα - α for each grid value and simulated dataset      - t t-stat  for each grid value and simulated dataset\n\n\n\n\n\n","category":"function"},{"location":"index.html#ARGridBootstrap.rngarray-Tuple{Any}","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.rngarray","text":"rngarray(n)\n\nCreate n rng states that will not overlap for 10^20 steps.\n\nNote: this will be unneeded in Julia 1.3 when thread-safe RNG is   included.\n\n\n\n\n\n","category":"method"},{"location":"index.html#ARGridBootstrap.argridkernel!-Union{Tuple{P}, Tuple{Any,Any,Any,Val{P},Any,Any,Any}} where P","page":"ARGridBootstrap.jl","title":"ARGridBootstrap.argridkernel!","text":"argridkernel!(ba,bootq, bootse, ar::Val{P}, e, ei, αgrid)\n\nGPU kernel for simulation and estimation of AR(P) model. \n\nIn/Out:     - ba: nboot × ngrid array.  Will be filled with bootstrap estimates of α        grid values of true α      - bootq: nboot × ngrid array.  Will be filled with bootstrap        estimates of α     - bootse: nboot × ngrid array.  Will be filled with standard        errors of α for each bootstrap repetition      \n\nInputs:     - ar::Val{P} : autoregressive order for estimation. Simulated        model will always be AR(1) with 0 intercept and time trend, but        estimation will use an AR(P) model with intercept and time        trend. Only the AR(1) parameter estimate is included in ba,       bootq, and bootse.     - e : error terms to draw with replacement     - ei : nboot × ngrid × length(e) array of indices of e to              use to generate bootstrap sample1     - αgrid : length ngrid values of AR(1) parameter to perform        bootstrap on.\n\nOutputs: returns nothing, but modifies in place ba, bootq, and bootse\n\n\n\n\n\n","category":"method"}]
}
